type addCommentResponse {
  ok: Boolean!
  error: String
  comment: Comment
}

type Mutation {
  addComment(text: String!, postId: String!): addCommentResponse!
  toggleLike(postId: String!): toggleLikeResponse!
  sendMessage(roomId: String, message: String!, toId: String): sendMessageResponse!
  editPost(id: String!, caption: String, location: String, action: ACTIONS!): editPostResponse!
  upload(caption: String!, files: [String!]!): uploadResponse!
  confirmSecret(secret: String!, email: String!): confirmSecretResponse!
  createAccount(username: String!, email: String!, firstName: String, lastName: String, bio: String, avatar: String): createAccountResponse!
  editUser(username: String, email: String, firstName: String, lastName: String, bio: String, avatar: String): editUserResponse!
  follow(id: String!): followResponse!
  requestSecret(email: String): requestSecretRespone!
  unfollow(id: String!): unfollowResponse!
}

type toggleLikeResponse {
  ok: Boolean!
  error: String
}

type newMessageResponse {
  ok: Boolean!
  error: String
  message: Message
}

type Subscription {
  newMessage(roomId: String!): newMessageResponse
}

type sendMessageResponse {
  ok: Boolean
  error: String
  message: Message
}

type User {
  id: ID!
  avatar: String
  username: String!
  email: String!
  firstName: String
  lastName: String
  fullName: String
  isFollowing: Boolean!
  isSelf: Boolean!
  bio: String
  following: [User!]!
  followingCount: Int!
  followers: [User!]!
  followersCount: Int!
  posts: [Post!]!
  likes: [Like!]!
  comments: [Comment!]!
  rooms: [Room!]!
  loginSecret: String
}

type Post {
  id: ID!
  location: String
  caption: String!
  user: User!
  files: [File!]!
  likes: [Like!]!
  likeCount: Int!
  isLiked: Boolean!
  comments: [Comment!]!
  commentCount: Int!
}

type Like {
  id: ID!
  user: User!
  post: Post!
}

type Comment {
  id: ID!
  text: String!
  user: User!
  post: Post!
}

type File {
  id: ID!
  url: String!
  post: Post!
}

type Room {
  id: ID!
  participants: [User!]!
  messages: [Message!]!
}

type Message {
  id: ID!
  text: String!
  from: User!
  to: User!
  room: Room!
}

enum ACTIONS {
  EDIT
  DELETE
}

type editPostResponse {
  ok: Boolean!
  error: String
  post: Post
}

type searchPostResponse {
  ok: Boolean
  error: String
  post: [Post]
}

type Query {
  searchPost(term: String!): searchPostResponse!
  seeFeed: seeFeedResponse!
  seeFullPost(id: String!): seeFullPostResponse!
  seeRoom(id: String!): seeRoomResponse!
  seeRooms: seeRoomsResponse!
  me: meResponse!
  searchUser(term: String!): searchUserResponse!
  seeUser(id: String!): seeUserResponse!
}

type seeFeedResponse {
  ok: Boolean
  error: String
  posts: [Post!]
}

type seeFullPostResponse {
  ok: Boolean!
  error: String
  post: Post
}

type uploadResponse {
  ok: Boolean!
  error: String
  post: Post
}

type seeRoomResponse {
  ok: Boolean!
  error: String
  room: Room
}

type seeRoomsResponse {
  ok: Boolean!
  error: String
  rooms: [Room!]
}

type confirmSecretResponse {
  ok: Boolean!
  error: String
  token: String
}

type createAccountResponse {
  ok: Boolean!
  error: String
  user: User
}

type editUserResponse {
  ok: Boolean!
  error: String
  user: User
}

type followResponse {
  ok: Boolean!
  error: String
}

type meResponse {
  ok: Boolean!
  error: String
  user: User
}

type requestSecretRespone {
  ok: Boolean!
  error: String
}

type searchUserResponse {
  ok: Boolean
  error: String
  user: [User]
}

type seeUserResponse {
  ok: Boolean!
  error: String
  user: User
}

type unfollowResponse {
  ok: Boolean!
  error: String
}
